import sys
import re
import os

# Take a bunch of wren files, and embed them into a big C and header file

out_dir = sys.argv[1]
input_files = sys.argv[2:]

META_PATTERN = re.compile(r"^//\s*meta:(?P<name>[a-zA-Z_]*)=(?P<value>.*)\s*$")


def load_meta_tags(filename) -> dict:
    attrs = dict()

    with open(filename, "r") as fi:
        for line in fi:
            match = META_PATTERN.match(line)
            if not match:
                continue
            attrs[match.group("name")] = match.group("value")

    return attrs


if not os.path.isdir(out_dir + "/gen"):
    os.mkdir(out_dir + "/gen")

with open(out_dir + "/gen/wren_generated_src.h", "w") as fi:
    fi.write("// AUTOGENERATED, DO NOT MODIFY!\n")
    fi.write("#pragma once\n")
    fi.write("#ifdef __cplusplus\n")
    fi.write('extern "C"\n')
    fi.write("#endif\n")
    fi.write('void lookup_builtin_wren_src(const char *module, const char **src);\n')
    for filename in input_files:
        name = os.path.basename(filename)[:-5]  # remove the .wren
        fi.write("extern const char *wren_src_%s;\n" % name)

with open(out_dir + "/wren_generated_src.c", "w") as fi:
    fi.write("// AUTOGENERATED, DO NOT MODIFY!\n")
    fi.write('#include "wren_generated_src.h"\n')
    fi.write('#include <string.h>\n')
    fi.write('\n')

    # Write the lookup function
    fi.write("void lookup_builtin_wren_src(const char *module, const char **src) {\n")
    fi.write("\t*src = NULL;\n")
    for filename in input_files:
        tags = load_meta_tags(filename)
        name = os.path.basename(filename)[:-5]  # remove the .wren
        module_name = tags["module"] if "module" in tags else "base/native/" + name
        fi.write('\tif (strcmp(module, "%s") == 0)\n\t\t*src = wren_src_%s;\n' % (module_name, name))
    fi.write("}\n\n")

    # Write the source code bodies
    for filename in input_files:
        name = os.path.basename(filename)[:-5]  # remove the .wren
        fi.write("const char *wren_src_%s = \n" % name)
        with open(filename, "r") as infile:
            for line in infile:
                line = line.strip()

                # Escape stuff
                # I'm sure there's loads of edge cases this misses out on, but those can be
                # fixed if we ever actually run into them.
                line = line.replace('\\', '\\\\')
                line = line.replace('"', '\\"')

                fi.write('\t"%s\\n"\n' % line)
        fi.write(";\n")
